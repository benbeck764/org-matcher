module.exports = function(grunt) {

    grunt.initConfig({

        pkg: grunt.file.readJSON('package.json'),
        commonConfig: grunt.file.readJSON('src/config/common.config.json'),
        dependencies: grunt.file.readJSON('src/client/app/dependencies.json'),

        concat: {
            options: {
                separator: '\n\n'
            },
            buildCss: {
                src: ['src/client/content/styles/*.css'],
                dest: 'common_package/client/content/styles/common.style.css'
            },
            buildPfpProxy: {
                src: ['<%= http.figloWebApi.dest %>', 'src/client/app/services/pfpProxyService/pfpProxyDependencies.dev.js'],
                dest: '<%= http.figloWebApi.dest %>'
            }
        },
        clean: {
            local: ['common_package'],
            coverage: ['coverage']
        },
        copy: {
            bowerComponentsCss: {
                cwd: '',
                expand: true,
                src: [ '<%= dependencies.vendorCss %>' ],
                dest: 'common_package/lib/vendor/css/',
                flatten: true
            },
            bowerComponentsFonts: {
                cwd: '',
                expand: true,
                src: [ '<%= dependencies.vendorFonts %>' ],
                dest: 'common_package/lib/vendor/fonts/',
                flatten: true
            },
            bowerComponentsJs: {
                cwd: '',
                expand: true,
                src: [ '<%= dependencies.vendorJs %>' ],
                dest: 'common_package/lib/vendor/js/',
                flatten: true
            },
            scripts: {
                expand: true,
                cwd: 'src',
                src: ['client/app/**/*.js', '!**/*.tests.js', '!**/*.dev.js'],
                dest: 'common_package/'
            },
            content: {
                expand: true,
                cwd: 'src',
                src: ['client/content/**', '!client/content/styles/**'],
                dest: 'common_package/'
            },
            devCommon: {
                expand: true,
                cwd: 'src',
                src: ['devCommon/**'],
                dest: 'common_package/'
            },
            config: {
                expand: true,
                cwd: 'src',
                src: ['config/**'],
                dest: 'common_package/'
            },
            serverFiles: {
                expand: true,
                cwd: 'src',
                src: ['server/**'],
                dest: 'common_package/'
            },
            commonPackageToWidgets: {
                expand: true,
                src: 'common_package/**',
                dest: '../Widgets/',
            },
            commonPackageToAdvisorDashboard: {
                expand: true,
                src: 'common_package/**',
                dest: '../Sites/AdvisorDashboard/',
            },
            commonPackageToClientPortal: {
                expand: true,
                src: 'common_package/**',
                dest: '../Sites/ClientPortal/',
            }
        },
        http: {
            figloWebApi: {
                options: {
                    url: '<%= commonConfig.PFP_API %>/DataProxy',
                },
                dest: 'common_package/client/app/services/pfpProxyService/DataProxy.js'
            }
        },
        karma: {
            options: {
                configFile: 'config/karma-conf.js'
            },
            unit: {
                singleRun: true
            }
        }
    });

    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-concat');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-http');
    grunt.loadNpmTasks('grunt-karma');

    //   This task will package up everything in this project and push the package
    //   to the dependent projects on disk.
    grunt.registerTask('buildCommonPackage',
        [
            // Clean all files from previous run.
            'clean:local',

            // Concatenate all .css files from source coded into a single .css file.
            'concat:buildCss',

            // Copy vendor libraries to package (jQuery, Angular, Bootstrap, etc...)
            'copy:bowerComponentsCss',
            'copy:bowerComponentsFonts',
            'copy:bowerComponentsJs',

            // Copy all scripts to the package:
            'copy:scripts',

            // Copy all content to the package:
            'copy:content',

            // Copy devCommon files.
            'copy:devCommon',

            // Copy config files.
            'copy:config',

            // Copy server files.
            'copy:serverFiles',

            // Go out and fetch the DataProxy.js file from the Hawanedo.Web.Api service.
            'http',

            // Concatenate DataProxy.js and its dependencies.
            'concat:buildPfpProxy',

            // Copy package to the other projects.
            'copy:commonPackageToWidgets',
            'copy:commonPackageToAdvisorDashboard',
            'copy:commonPackageToClientPortal'
        ]);

    grunt.registerTask('test',
        [
            // Run the tests:
            'karma:unit',

            // Clean up the coverage folder that generates for reasons I don't understand:
            'clean:coverage'
        ]);
};